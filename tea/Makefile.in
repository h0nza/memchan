# Makefile.in --
#
#	This file is the Makefile for the TEA compliant Memchan Extension.
#	If it has the name "Makefile.in" then it is a template for a Makefile;
#	to generate the actual Makefile, run "./configure", which is a
#	configuration script generated by the "autoconf" program (constructs
#	like "@foo@" will get replaced in the actual Makefile.
#
# Copyright (c) 1999 Scriptics Corporation.
# Copyright (c) 1999 Andreas Kupries <a.kupries@westend.com>.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: Makefile.in,v 1.10 2001/11/13 01:36:37 andreas_kupries Exp $

#========================================================================
# Additional variables defined here for convenient access to some
# directories in the tree. The prefix 'MC_' is used to differentiate them
# from everything else which was predefined by TEA.
#========================================================================

MC_TOPDIR	=	$(srcdir)
MC_GENSRCDIR	=	$(MC_TOPDIR)/generic
MC_DOCDIR	=	$(MC_TOPDIR)/doc
MC_TOOLDIR	=	$(MC_TOPDIR)/tools
MC_TESTDIR	=	$(MC_TOPDIR)/tests
MC_TEATESTDIR	=	$(MC_TOPDIR)/tea.tests

#========================================================================
# This is the (parameterized) name of the library that we are building.
#========================================================================

lib_BINARIES	=	$(Memchan_LIB_FILE) $(Buf_STUB_LIB_FILE)
BINARIES	=	$(lib_BINARIES)

#========================================================================
# Enumerate the names of the source files included in this package.
# This will be used when a dist target is added to the Makefile.
#========================================================================

Memchan_SOURCES	=	\
			$(MC_GENSRCDIR)/memchan.c	\
			$(MC_GENSRCDIR)/init.c		\
			$(MC_GENSRCDIR)/fifo.c		\
			$(MC_GENSRCDIR)/fifo2.c		\
			$(MC_GENSRCDIR)/null.c		\
			$(MC_GENSRCDIR)/counter.c	\
			$(MC_GENSRCDIR)/bufStubInit.c	\
			$(MC_GENSRCDIR)/buf.c		\
			$(MC_GENSRCDIR)/bufFix.c	\
			$(MC_GENSRCDIR)/bufExt.c	\
			$(MC_GENSRCDIR)/bufRange.c	\
			$(MC_GENSRCDIR)/bufQueue.c



SOURCES		=	$(Memchan_SOURCES)

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#========================================================================

Buf_STUB_OBJECTS=	bufStubLib.$(OBJEXT)

Memchan_OBJECTS	=	memchan.$(OBJEXT)	\
			init.$(OBJEXT)		\
			counter.$(OBJEXT)	\
			fifo.$(OBJEXT)		\
			fifo2.$(OBJEXT)		\
			null.$(OBJEXT)		\
			bufStubInit.$(OBJEXT)	\
			buf.$(OBJEXT)		\
			bufFix.$(OBJEXT)	\
			bufExt.$(OBJEXT)	\
			bufRange.$(OBJEXT)	\
			bufQueue.$(OBJEXT)	\
			$(Buf_STUB_OBJECTS)

OBJECTS		=	$(Memchan_OBJECTS)

#========================================================================
# The substitution of "Memchan_LIB_FILE" into the variable name below
# let's us refer to the objects for the library without knowing the name
# of the library in advance.  It also lets us use the "$@" variable in
# the rule for building the library, so we can refer to both the list of 
# objects and the library itself in a platform-independent manner.
#========================================================================

Memchan_LIB_FILE		=	@Memchan_LIB_FILE@
$(Memchan_LIB_FILE)_OBJECTS	=	$(Memchan_OBJECTS)

Buf_STUB_LIB_FILE		=	@Buf_STUB_LIB_FILE@
$(Buf_STUB_LIB_FILE)_OBJECTS	=	$(Buf_STUB_OBJECTS)

#========================================================================
# This is a list of header files to be installed
#========================================================================

GENERIC_HDRS	=

#========================================================================
# Define a list of files containing the stub declarations.
#========================================================================

Buf_DECLS = \
	$(MC_GENSRCDIR)/buf.decls	\
	$(MC_GENSRCDIR)/bufInt.decls

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added to the configure script.
#========================================================================

MEMCHAN_VERSION	=	@MEMCHAN_VERSION@

#========================================================================
# Nothing of the variables below this line need to be changed.  Please
# check the TARGETS section below to make sure the make targets are
# correct.
#========================================================================

SHELL		= @SHELL@

srcdir		= @srcdir@
top_srcdir	= @top_srcdir@
prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
sbindir		= @sbindir@
libexecdir	= @libexecdir@
datadir		= @datadir@
sysconfdir	= @sysconfdir@
sharedstatedir	= @sharedstatedir@
localstatedir	= @localstatedir@
libdir		= @libdir@
infodir		= @infodir@
mandir		= @mandir@
includedir	= @includedir@
oldincludedir	= /usr/include

DESTDIR =

pkgdatadir	= $(datadir)/@PACKAGE@
pkglibdir	= $(libdir)/@PACKAGE@
pkgincludedir	= $(includedir)/@PACKAGE@

top_builddir	= .

INSTALL			= @INSTALL@
INSTALL_PROGRAM		= @INSTALL_PROGRAM@
INSTALL_DATA		= @INSTALL_DATA@
INSTALL_SCRIPT		= @INSTALL_SCRIPT@
INSTALL_STRIP_FLAG	=
transform		= @program_transform_name@

NORMAL_INSTALL		= :
PRE_INSTALL		= :
POST_INSTALL		= :
NORMAL_UNINSTALL	= :
PRE_UNINSTALL		= :
POST_UNINSTALL		= :

PACKAGE			= @PACKAGE@
VERSION			= @VERSION@
CC			= @CC@
CFLAGS_DEBUG		= @CFLAGS_DEBUG@
CFLAGS_DEFAULT		= @CFLAGS_DEFAULT@
CFLAGS_OPTIMIZE		= @CFLAGS_OPTIMIZE@
CLEANFILES		= @CLEANFILES@
EXEEXT			= @EXEEXT@
LDFLAGS_DEBUG		= @LDFLAGS_DEBUG@
LDFLAGS_DEFAULT		= @LDFLAGS_DEFAULT@
LDFLAGS_OPTIMIZE	= @LDFLAGS_OPTIMIZE@
MAKE_LIB		= @MAKE_LIB@
MAKE_SHARED_LIB		= @MAKE_SHARED_LIB@
MAKE_STATIC_LIB		= @MAKE_STATIC_LIB@
OBJEXT			= @OBJEXT@
RANLIB			= @RANLIB@
SHLIB_CFLAGS		= @SHLIB_CFLAGS@
SHLIB_LD		= @SHLIB_LD@
SHLIB_LDFLAGS		= @SHLIB_LDFLAGS@
SHLIB_LD_LIBS		= @SHLIB_LD_LIBS@
STLIB_LD		= @STLIB_LD@
TCL_BIN_DIR		= @TCL_BIN_DIR@
TCL_DEFS		= @TCL_DEFS@
TCL_EXTRA_CFLAGS	= @TCL_EXTRA_CFLAGS@
TCL_LD_FLAGS		= @TCL_LD_FLAGS@
TCL_LIBS		= @TCL_LIBS@
TCL_SHLIB_LD_LIBS	= @TCL_SHLIB_LD_LIBS@
TCL_SRC_DIR		= @TCL_SRC_DIR@
TCL_DBGX		= @TCL_DBGX@
TCL_STUB_LIB_FILE	= @TCL_STUB_LIB_FILE@
TCL_STUB_LIB_SPEC	= @TCL_STUB_LIB_SPEC@
TCL_TOOL_DIR_NATIVE	= @TCL_TOOL_DIR_NATIVE@
TCL_TOP_DIR_NATIVE	= @TCL_TOP_DIR_NATIVE@
TCL_UNIX_DIR_NATIVE	= @TCL_UNIX_DIR_NATIVE@
TCL_WIN_DIR_NATIVE	= @TCL_WIN_DIR_NATIVE@
INCLUDE_DIR_NATIVE	= @INCLUDE_DIR_NATIVE@
TCL_BMAP_DIR_NATIVE	= @TCL_BMAP_DIR_NATIVE@
TCL_PLATFORM_DIR_NATIVE	= @TCL_PLATFORM_DIR_NATIVE@
TCL_GENERIC_DIR_NATIVE	= @TCL_GENERIC_DIR_NATIVE@
TCLSH_PROG		= @TCLSH_PROG@

AUTOCONF	= autoconf

LDFLAGS		= $(LDFLAGS_DEFAULT)

INCLUDES	= @TCL_INCLUDES@

EXTRA_CFLAGS	=	$(TCL_DEFS)		\
			$(PROTO_FLAGS)		\
			$(SECURITY_FLAGS)	\
			$(MEM_DEBUG_FLAGS)	\
			$(KEYSYM_FLAGS)		\
			$(NO_DEPRECATED_FLAGS)

DEFS		= @DEFS@ $(EXTRA_CFLAGS)

ACLOCAL_M4		= $(top_srcdir)/aclocal.m4
mkinstalldirs		= $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES	= mkIndex.tcl

CPPFLAGS	= @CPPFLAGS@
LIBS		= @LIBS@
AR		= ar
CFLAGS		= @CFLAGS@
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD		= $(CC)
LINK		= $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@

#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

doc:
#	Currently no documentation to create, the HTML is part of the
#	distribution.
#	.................................................................
#	@echo "If you have documentation to create, place the commands to"
#	@echo "build the docs in the 'doc:' target.  For example:"
#	@echo ""
#	@echo "xml2nroff exampleA.xml > exampleA.n"
#	@echo "xml2html exampleA.xml > exampleA.html"

install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries
	$(mkinstalldirs) $(includedir)
	@echo "Installing header files in $(includedir)"
#	@for i in $(GENERIC_HDRS) ; do \
#	    echo "Installing $$i" ; \
#	    $(INSTALL_DATA) $$i $(includedir) ; \
#	done;

#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc: doc
	$(mkinstalldirs) $(mandir)/mann
	@for i in $(srcdir)/doc/*.n; \
	    do \
	    echo "Installing `basename $$i`"; \
	    rm -f $(mandir)/mann/`basename $$i`; \
	    $(INSTALL_DATA) $$i $(mandir)/mann/`basename $$i` ; \
	    chmod 444 $(mandir)/mann/`basename $$i`; \
	done

#	@echo "Information about the usage of this extension can be found"
#	@echo "in the HTML documentation at ${MC_DOCDIR}/html/index.html"
#	@echo "or, more specifically ${MC_DOCDIR}/html/memchan_cmds.html"
#	@echo "Just use your favorite browser to read them."

#	Currently no documentation to install. We have documentation in HTML
#	format, but there is no agreed upon place for them.
#	...............................................
#	$(mkinstalldirs) $(mandir)/man1
#	$(mkinstalldirs) $(mandir)/man3
#	$(mkinstalldirs) $(mandir)/mann
#	@for i in $(srcdir)/*.n; \
#	    do \
#	    echo "Installing $$i"; \
#	    rm -f $(mandir)/mann/$$i; \
#	    $(INSTALL_DATA) $$i $(mandir)/mann/$$i ; \
#	    chmod 444 $(mandir)/mann/$$i; \
#       done

check:	test
test:
	echo load ./$(Memchan_LIB_FILE) \; cd $(MC_TESTDIR) \; source all | $(TCLSH_PROG)

testshell	=	$(TCLSH_PROG) $(srcdir)/testshell

tcheck:
ttest:
	$(testshell)	\
		-load 'load ./$(Memchan_LIB_FILE)' \
		-testdir $(MC_TEATESTDIR) 


#	LD_LIBRARY_PATH="$(srcdir):$(TCL_LIB_DIR)"; export \
#	SHLIB_PATH="$(srcdir):$(TCL_LIB_DIR)"; \

depend:

#
# Target to regenerate header files and stub files from the *.decls tables.
#

genstubs:
	$(TCLSH_PROG)	\
		$(MC_TOOLDIR)/genStubs.tcl $(MC_GENSRCDIR)	\
		$(MC_GENSRCDIR)/buf.decls			\
		$(MC_GENSRCDIR)/bufInt.decls

#
# Target to check that all exported functions have an entry in the stubs
# tables.
#

checkstubs:
	-@for i in `nm -p $(Buf_LIB_FILE) | awk '$$2 ~ /T/ { print $$3 }' \
		| sort -n`; do \
		match=0; \
		for j in $(Buf_DECLS); do \
		    if [ `grep -c $$i $$j` -gt 0 ]; then \
			match=1; \
		    fi; \
		done; \
		if [ $$match -eq 0 ]; then echo $$i; fi \
	done

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
# $(Memchan_LIB_FILE) is listed as part of the BINARIES variable at the
# top of the Makefile.  That ensures that this target is built when you
# run "make binaries".
#
# You shouldn't need to modify this target.
#========================================================================

$(Memchan_LIB_FILE): $(Memchan_OBJECTS)
	-rm -f $(Memchan_LIB_FILE)
	@MAKE_LIB@
	$(RANLIB) $(Memchan_LIB_FILE)

$(Buf_STUB_LIB_FILE): $(Buf_STUB_OBJECTS)
	$(AR) cr $@ $(Buf_STUB_OBJECTS)

#========================================================================
# We need to enumerate the list of .c to .o lines here.
# Unfortunately, there does not seem to be any other way to do this
# in a Makefile-independent way.  We can't use VPATH because it picks up
# object files that may be located in the source directory.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.
#
# ** Wrong **, it refers to the path P which was used to find the file
# given to AC_INIT, i.e. in case of AC_INIT(file) the system found it via
# P/file. Here it most commonly refers to '/somewhere/memchan/tea/', which
# is not the toplevel directory containing the extensions.
#
# The text above assumes a directory structure where the Makefile and all
# related files *are* found in the toplevel directory. 
#
# If your sources are in a subdirectory, you will have to modify the paths
# to reflect this:
#
# exampleA.$(OBJEXT): $(srcdir)/src/win/exampleA.c
# 	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/win/exampleA.c` -o $@
#========================================================================

memchan.$(OBJEXT):	$(MC_GENSRCDIR)/memchan.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/memchan.c` -o $@

fifo.$(OBJEXT):		$(MC_GENSRCDIR)/fifo.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/fifo.c` -o $@

fifo2.$(OBJEXT):	$(MC_GENSRCDIR)/fifo2.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/fifo2.c` -o $@

null.$(OBJEXT):		$(MC_GENSRCDIR)/null.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/null.c` -o $@

init.$(OBJEXT):		$(MC_GENSRCDIR)/init.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/init.c` -o $@

counter.$(OBJEXT):	$(MC_GENSRCDIR)/counter.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/counter.c` -o $@

#========================================================================
# Internal library: buffers

bufStubLib.$(OBJEXT):	$(MC_GENSRCDIR)/bufStubLib.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/bufStubLib.c` -o $@

bufStubInit.$(OBJEXT):	$(MC_GENSRCDIR)/bufStubInit.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/bufStubInit.c` -o $@

buf.$(OBJEXT):	$(MC_GENSRCDIR)/buf.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/buf.c` -o $@

bufFix.$(OBJEXT):	$(MC_GENSRCDIR)/bufFix.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/bufFix.c` -o $@

bufExt.$(OBJEXT):	$(MC_GENSRCDIR)/bufExt.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/bufExt.c` -o $@

bufRange.$(OBJEXT):	$(MC_GENSRCDIR)/bufRange.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/bufRange.c` -o $@

bufQueue.$(OBJEXT):	$(MC_GENSRCDIR)/bufQueue.c
	$(COMPILE) -c `@CYGPATH@ $(MC_GENSRCDIR)/bufQueue.c` -o $@

#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-rm -f config.status

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Additionally, the .dll files go into the bin directory, but the .lib
# files go into the lib directory.  On Unix platforms, all library files
# go into the lib directory.  In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh8.2 shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries: installdirs
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
	        echo " $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p"; \
	        $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p; \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib; \
		fi; \
	    else \
		echo " $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p"; \
	        $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p; \
	    fi; \
	  else :; fi; \
	done
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done
	if test "x$(MAKE_LIB)" = "x$(MAKE_SHARED_LIB)"; then \
	  $(TCLSH_PROG) mkIndex.tcl; \
	fi

#========================================================================
# Install binary executables (e.g. .exe files)
#
# You should not have to modify this target.
#========================================================================

install-bin-binaries: installdirs
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done

.SUFFIXES: .c .o .obj

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(srcdir)/configure: $(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)
	cd $(srcdir) && $(AUTOCONF)


uninstall-binaries:
	@$(NORMAL_UNINSTALL)
	list='$(BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir)
	$(mkinstalldirs)  $(DESTDIR)$(bindir)
	$(mkinstalldirs)  $(DESTDIR)$(pkglibdir)

.PHONY: all binaries clean depend distclean doc install installdirs libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
