# -*- tcl -*-
# compilation on unix

node memchan_cunix {
    title       "Memchan: Compilation on Unix"
    shortTitle  "Unix"
    description "Compilation on Unix"
    parent      memchan_compile

    contents {
	p "
	There are several different flavors of Un*x out there in this small
	world. A [strong configure] script, as generated by [strong {GNU
	autoconf}], is provided to handle them all together."

	bullet_list {
	    li [::pool::cgi::getString {
		p "Simply type:"

		bullet_list {
		    li configure
		    li make
		}

		p "
		The makefile will then check number and names of the files in
		the package, generate dependency information, compile them and
		at last build the library."
	    }
	    ]

	    li "
	    In contrast to earlier versions [strong {the system will build
	    a shared library by default}]. Give option [opt --disable-shared]
	    to [cmd configure] if this is not desired."

	    li "
	    To check the extension, type [cmd {make test}] or
	    [cmd {make check}]. This will build a tclsh containing just [tcl]
	    and memchan, and then runs some test-scripts checking the
	    behaviour of the created library."

	    li "
	    At last type [cmd {make install}] to install the generated
	    library and the exported header. This installation conforms to
	    the rules set by the package loader mechanism of the tcl-core."

	}

	p "
	You do have a non-standard setup (tcl not installed below
	[afile /usr/local]) ?"

	p "
	Don't fret, there are some tuning options for [cmd configure] to help
	you."

	bullet_list {
	    li [::pool::cgi::getString {
		p "
		The configure script searches the core header [afile tcl.h] in
		the following places:"

		number_list {
		    li "\$(TCL_INCLUDE_DIR)"
		    li "[afile ../../tcl8.2*/generic]"
		    li "[afile ../../tcl8.1*/generic]"
		    li "[afile ../../tcl8.0*/generic]"
		    li "[afile ../../tcl/generic]"
		    li "[afile ../../tcl]"
		    li "\$(prefix)"
		    li "[afile /usr/local/include]"
		    li "[afile /usr/include]"
		}

		p "
		By default \$(TCL_INCLUDE_DIR) is empty and \$(prefix) points
		to the location of an installed 'tclsh' or is
		[afile /usr/local] if [tclsh] could not be found via \$PATH."

		p "There are three options to override these defaults:"

		table {
		    defrow {--prefix=DIR} {
			p "\$(prefix)=DIR"
		    }
		    defrow {--with-tcl=DIR} {
			p "\$(TCL_INCLUDE_DIR)=DIR/include"
		    }
		    defrow {--with-tcl-include-dir=DIR} {
			p "\$(TCL_INCLUDE_DIR)=DIR"
		    }
		}
	    }
	    ]

	    li [::pool::cgi::getString {
		p "
		To find [afile libtcl.a] (or [afile {libtcl.so.??}]) the
		paths"

		number_list {
		    li "\$(TCL_LIB_DIR)"
		    li "[afile ../../tcl8.2*/unix]"
		    li "[afile ../../tcl8.1*/unix]"
		    li "[afile ../../tcl8.0*/unix]"
		    li "[afile ../../tcl/unix]"
		    li "[afile ../../tcl]"
		    li "\$(exec_prefix)"
		    li "[afile /usr/local/include]"
		    li "[afile /usr/include]"
		}

		p "
		are searched. \$(TCL_LIB_DIR) is empty by default, but
		can be set via"

		table {
		    defrow {--with-tcl=DIR} {
			p "\$(TCL_LIB_DIR)=DIR/lib"
		    }
		    defrow {--with-tcl-lib-dir=DIR} {
			p "\$(TCL_LIB_DIR)=DIR"
		    }
		}

		p "
		\$(exec_prefix) contains the same value as \$(prefix) by
		default, but can be set explicitly via [opt --exec-prefix]."
	    }
	    ]
	}
    }
}
